# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import file_manage_pb2 as file__manage__pb2


class FileManageServiceStub(object):
    """定义文件管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.submitFile = channel.stream_stream(
                '/FileManageService/submitFile',
                request_serializer=file__manage__pb2.SubmitFileRequest.SerializeToString,
                response_deserializer=file__manage__pb2.SubmitFileResponse.FromString,
                )
        self.clearCache = channel.unary_unary(
                '/FileManageService/clearCache',
                request_serializer=file__manage__pb2.ClearCacheRequest.SerializeToString,
                response_deserializer=file__manage__pb2.ClearCacheResponse.FromString,
                )


class FileManageServiceServicer(object):
    """定义文件管理服务
    """

    def submitFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clearCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileManageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'submitFile': grpc.stream_stream_rpc_method_handler(
                    servicer.submitFile,
                    request_deserializer=file__manage__pb2.SubmitFileRequest.FromString,
                    response_serializer=file__manage__pb2.SubmitFileResponse.SerializeToString,
            ),
            'clearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.clearCache,
                    request_deserializer=file__manage__pb2.ClearCacheRequest.FromString,
                    response_serializer=file__manage__pb2.ClearCacheResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileManageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileManageService(object):
    """定义文件管理服务
    """

    @staticmethod
    def submitFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/FileManageService/submitFile',
            file__manage__pb2.SubmitFileRequest.SerializeToString,
            file__manage__pb2.SubmitFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileManageService/clearCache',
            file__manage__pb2.ClearCacheRequest.SerializeToString,
            file__manage__pb2.ClearCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
